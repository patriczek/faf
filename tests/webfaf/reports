#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os
import json
try:
    import unittest2 as unittest
except ImportError:
    import unittest
from StringIO import StringIO
from webfaftests import WebfafTestCase

from pyfaf.storage import InvalidUReport, Report, ReportHash, BzBug, ReportBz, Bugtracker, BzUser, BzBug
from pyfaf import config, ureport
from pyfaf.queries import *

class ReportTestCase(WebfafTestCase):
    """
    Tests for webfaf.reports
    """

    def setUp(self):
        super(ReportTestCase, self).setUp()
        self.basic_fixtures()
        self.db.session.commit()

    def post_file(self, url, contents):
        r = self.app.post(url, buffered=True,
                          headers={"Accept": "application/json"},
                          content_type="multipart/form-data",
                          data={"file": (StringIO(contents), "lala.txt")})

        return r

    def create_bugzilla_bug(self):
        #get last report id

        bztracker = Bugtracker()
        bztracker.name = "rhel-bugzilla"

        bzuser = BzUser()
        bzuser.email = "test@redhat.com"
        bzuser.name = "test@redhat.com"
        bzuser.real_name = "Test User"
        bzuser.can_login = "t"

        bzbug = BzBug()
        bzbug.opsysrelease_id = 1
        bzbug.summary = "summary"
        bzbug.status = "NEW"
        bzbug.creation_time = "2016-02-12 11:44:10"
        bzbug.last_change_time = "2016-02-12 11:44:10"
        bzbug.tracker_id = 1
        bzbug.component_id = 1
        bzbug.whiteboard = 1
        bzbug.creator_id = 1

        self.db.session.add(bztracker)
        self.db.session.add(bzuser)
        self.db.session.add(bzbug)
        self.db.session.flush()

        reports = self.db.session.query(Report).all()
        for rep in reports:
            reportbz = ReportBz()
            reportbz.report_id = str(rep.id)
            reportbz.bzbug_id = 1

            self.db.session.add(reportbz)
            self.db.session.flush()

    def post_report(self, contents):
        return self.post_file("/reports/new/", contents)

    def post_attachment(self, contents):
        return self.post_file("/reports/attach/", contents)

    def clear_reports(self):
        self.db.session.query(Report).delete()
        self.db.session.commit()
        self.db.session.flush()

    def test_new_report_ureport1(self):
        """
        Test saving of ureport version 1
        """
        path = os.path.join(self.reports_path, 'ureport1')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)
        self.assertEqual(js["result"], False)
        self.assertEqual(js["bthash"],
                         "38faad7cb921ee2a19f42ff01a8f9c2066133f8d")

    def test_new_report_ureport2(self):
        """
        Test saving of ureport version 2
        """

        path = os.path.join(self.reports_path, 'ureport2')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)
        self.assertEqual(js["result"], False)
        self.assertEqual(js["bthash"],
                         "2dd542ba1f1e074216196b6c0bd548609bf38ebc")

    def test_new_report_prefilter_solution(self):
        """
        Test prefilter solutions of ureport version 2
        """

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "TestSolution",
            "NOTE": "TestSolution",
            "note-html": "<html><b>HTML</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "TestSolution",
            "opsys": "fedora",
            "pkgname": "^faf.*$",
        }), 0)
        self.db.session.commit()

        path = os.path.join(self.reports_path, 'ureport2')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)

        self.assertEqual(js["result"], True)
        self.assertEqual(js["bthash"],
                         "2dd542ba1f1e074216196b6c0bd548609bf38ebc")
        self.assertIn("Your problem seems to be caused by TestSolution",
                      js["message"])
        self.assertEqual(js["solutions"][0]["url"],
                         "http://www.fedoraproject.org")

    def test_invalid_report(self):
        """
        Test error handling of invalid reports
        """

        r = self.post_report("invalid")
        self.assertEqual(json.loads(r.data)["error"], u"Couldn't parse JSON data.")
        self.assertEqual(self.db.session.query(InvalidUReport).count(), 1)

        r = self.post_report('{"invalid":"json"}')
        self.assertEqual(json.loads(r.data)["error"], u"uReport data is invalid.")
        self.assertEqual(self.db.session.query(InvalidUReport).count(), 2)

    def test_attach(self):
        """
        Test attach functionality
        """

        path = os.path.join(self.reports_path, 'bugzilla_attachment')
        with open(path) as file:
            r = self.post_attachment(file.read())
        self.assertEqual(json.loads(r.data)["result"], True)

    def test_attach_invalid(self):
        """
        Test error handling of invalid attachments
        """

        r = self.post_attachment("invalid")
        self.assertEqual(json.loads(r.data)["error"], u"Invalid JSON file")

if __name__ == "__main__":
    unittest.main()
